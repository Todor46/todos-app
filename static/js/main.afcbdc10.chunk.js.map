{"version":3,"sources":["components/navBar.jsx","components/addNewTask.jsx","components/checkBox.jsx","components/deleteButton.jsx","components/tasks.jsx","components/todos.jsx","App.js","serviceWorker.js","index.js"],"names":["NavBar","className","href","AddNewTask","onAdd","onChange","currentValue","onSubmit","e","currentTarget","value","type","placeholder","CheckBox","task","onCheck","classes","isDone","onClick","DeleteButton","onDelete","Tasks","tasks","map","key","id","name","Todos","state","handleAdd","preventDefault","newTask","Date","newTaskValue","push","setState","handleCheck","index","indexOf","handleDelete","filter","t","handleChange","this","length","Component","App","Fragment","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iRAceA,EAZA,WACb,OACE,yBAAKC,UAAU,mCACb,yBAAKA,UAAU,aACb,uBAAGC,KAAK,IAAID,UAAU,gBAAtB,Y,cCUOE,EAdI,SAAC,GAAuC,IAArCC,EAAoC,EAApCA,MAAOC,EAA6B,EAA7BA,SAAUC,EAAmB,EAAnBA,aACrC,OACE,0BAAMC,SAAUH,EAAOH,UAAU,iBAC/B,2BACEI,SAAU,SAAAG,GAAC,OAAIH,EAASG,EAAEC,cAAcC,QACxCC,KAAK,OACLC,YAAY,eACZX,UAAU,eACVS,MAAOJ,MCFAO,EANE,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,QACpBC,EAAU,4BAEd,OADAA,GAAWF,EAAKG,OAAS,kBAAoB,YACtC,uBAAGC,QAAS,kBAAMH,EAAQD,IAAOb,UAAWe,KCGtCG,EANM,SAAC,GAAwB,IAAtBL,EAAqB,EAArBA,KAAMM,EAAe,EAAfA,SAC5B,OACE,uBAAGF,QAAS,kBAAME,EAASN,IAAOb,UAAU,8BCmBjCoB,EAnBD,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,MAAOP,EAAwB,EAAxBA,QAASK,EAAe,EAAfA,SAC/B,OACE,wBAAInB,UAAU,uBACXqB,EAAMC,KAAI,SAAAT,GAAI,OACb,wBACEU,IAAKV,EAAKW,GACVxB,UAAU,qEAEV,yBAAKA,UAAU,6BACb,kBAAC,EAAD,CAAUa,KAAMA,EAAMC,QAASA,IAC/B,8BAAOD,EAAKY,OAEd,kBAAC,EAAD,CAAcZ,KAAMA,EAAMM,SAAUA,UCiD/BO,E,2MA1DbC,MAAQ,CACNN,MAAO,I,EAGTO,UAAY,SAAArB,GACVA,EAAEsB,iBACF,IAAMC,EAAU,CACdN,GAAIO,OACJf,QAAQ,EACRS,KAAM,EAAKE,MAAMK,cAEbX,EAAK,YAAO,EAAKM,MAAMN,OAC7BA,EAAMY,KAAKH,GACX,EAAKI,SAAS,CAAEb,QAAOW,aAAc,M,EAGvCG,YAAc,SAAAtB,GACZ,IAAMQ,EAAK,YAAO,EAAKM,MAAMN,OACvBe,EAAQf,EAAMgB,QAAQxB,GAC5BQ,EAAMe,GAAN,eAAoBvB,GACpBQ,EAAMe,GAAOpB,QAAUK,EAAMe,GAAOpB,OACpC,EAAKkB,SAAS,CAAEb,W,EAGlBiB,aAAe,SAAAzB,GACb,IAAMQ,EAAQ,EAAKM,MAAMN,MAAMkB,QAAO,SAAAC,GAAC,OAAIA,EAAEhB,KAAOX,EAAKW,MACzD,EAAKU,SAAS,CAAEb,W,EAGlBoB,aAAe,SAAAhC,GACb,EAAKyB,SAAS,CAAEF,aAAcvB,K,wEAI9B,OACE,0BAAMT,UAAU,aACd,yBAAKA,UAAU,OACb,yBAAKA,UAAU,YACb,kBAAC,EAAD,CACEG,MAAOuC,KAAKd,UACZxB,SAAUsC,KAAKD,aACfpC,aAAcqC,KAAKf,MAAMK,iBAI/B,yBAAKhC,UAAU,8BACX0C,KAAKf,MAAMN,MAAMsB,QAAU,qBAC7B,kBAAC,EAAD,CACEtB,MAAOqB,KAAKf,MAAMN,MAClBP,QAAS4B,KAAKP,YACdhB,SAAUuB,KAAKJ,qB,GAnDPM,aCULC,G,uLATX,OACE,kBAAC,IAAMC,SAAP,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GALUF,cCOEG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.afcbdc10.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst NavBar = () => {\r\n  return (\r\n    <nav className=\"navbar navbar-dark bg-dark mb-5\">\r\n      <div className=\"container\">\r\n        <a href=\"/\" className=\"navbar-brand\">\r\n          Todos\r\n        </a>\r\n      </div>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default NavBar;\r\n","import React from 'react';\r\n\r\nconst AddNewTask = ({ onAdd, onChange, currentValue }) => {\r\n  return (\r\n    <form onSubmit={onAdd} className=\"form-unstyled\">\r\n      <input\r\n        onChange={e => onChange(e.currentTarget.value)}\r\n        type=\"text\"\r\n        placeholder=\"Add new task\"\r\n        className=\"form-control\"\r\n        value={currentValue}\r\n      />\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default AddNewTask;\r\n","import React from 'react';\r\n\r\nconst CheckBox = ({ task, onCheck }) => {\r\n  let classes = 'h5 mb-0 pointer far mr-3 ';\r\n  classes += task.isDone ? 'fa-check-square' : 'fa-square';\r\n  return <i onClick={() => onCheck(task)} className={classes}></i>;\r\n};\r\n\r\nexport default CheckBox;\r\n","import React from 'react';\r\n\r\nconst DeleteButton = ({ task, onDelete }) => {\r\n  return (\r\n    <i onClick={() => onDelete(task)} className=\"far pointer fa-trash-alt\"></i>\r\n  );\r\n};\r\n\r\nexport default DeleteButton;\r\n","import React from 'react';\r\nimport CheckBox from './checkBox';\r\nimport DeleteButton from './deleteButton';\r\n\r\nconst Tasks = ({ tasks, onCheck, onDelete }) => {\r\n  return (\r\n    <ul className=\"list-group col-md-5\">\r\n      {tasks.map(task => (\r\n        <li\r\n          key={task.id}\r\n          className=\"list-group-item d-flex justify-content-between align-items-center\"\r\n        >\r\n          <div className=\"d-flex align-items-center\">\r\n            <CheckBox task={task} onCheck={onCheck} />\r\n            <span>{task.name}</span>\r\n          </div>\r\n          <DeleteButton task={task} onDelete={onDelete} />\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default Tasks;\r\n","import React, { Component } from 'react';\r\nimport AddNewTask from './addNewTask';\r\nimport CheckBox from './checkBox';\r\nimport DeleteButton from './deleteButton';\r\nimport Tasks from './tasks';\r\n\r\nclass Todos extends Component {\r\n  state = {\r\n    tasks: []\r\n  };\r\n\r\n  handleAdd = e => {\r\n    e.preventDefault();\r\n    const newTask = {\r\n      id: Date(),\r\n      isDone: false,\r\n      name: this.state.newTaskValue\r\n    };\r\n    const tasks = [...this.state.tasks];\r\n    tasks.push(newTask);\r\n    this.setState({ tasks, newTaskValue: '' });\r\n  };\r\n\r\n  handleCheck = task => {\r\n    const tasks = [...this.state.tasks];\r\n    const index = tasks.indexOf(task);\r\n    tasks[index] = { ...task };\r\n    tasks[index].isDone = !tasks[index].isDone;\r\n    this.setState({ tasks });\r\n  };\r\n\r\n  handleDelete = task => {\r\n    const tasks = this.state.tasks.filter(t => t.id !== task.id);\r\n    this.setState({ tasks });\r\n  };\r\n\r\n  handleChange = value => {\r\n    this.setState({ newTaskValue: value });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <main className=\"container\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-4\">\r\n            <AddNewTask\r\n              onAdd={this.handleAdd}\r\n              onChange={this.handleChange}\r\n              currentValue={this.state.newTaskValue}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"row mt-5 table-responsive\">\r\n          {!this.state.tasks.length && 'There are no tasks'}\r\n          <Tasks\r\n            tasks={this.state.tasks}\r\n            onCheck={this.handleCheck}\r\n            onDelete={this.handleDelete}\r\n          />\r\n        </div>\r\n      </main>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Todos;\r\n","import React, { Component } from 'react';\r\nimport NavBar from './components/navBar';\r\nimport Todos from './components/todos';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <NavBar />\r\n        <Todos />\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport '@fortawesome/fontawesome-free/css/all.css';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}